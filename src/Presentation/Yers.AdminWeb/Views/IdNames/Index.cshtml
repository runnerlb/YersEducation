@using Newtonsoft.Json
@{
    ViewBag.Title = "基础信息";
}
@section css
{
    <style type="text/css">
        .avatar-uploader .el-upload {
            border: 1px dashed #d9d9d9;
            border-radius: 6px;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }
        .avatar-uploader .el-upload:hover {
            border-color: #409EFF;
        }
        .avatar-uploader-icon {
            font-size: 28px;
            color: #8c939d;
            min-width: 80px;
            height: 80px;
            line-height: 80px;
            text-align: center;
        }
        .avatar {
            min-width: 80px;
            height: 80px;
            display: block;
        }
    </style>
}
<div id="app">
    <el-row class="bgwhite">
        <el-col :span="24">
            <el-form :inline="true">
                <el-form-item label="类别名称">
                    <el-select  @@change="typeNameChange" v-model="listQuery.typeName" placeholder="请选择类别名称" style="width: 100%;">
                        <el-option label="请选择类别名称" value=""></el-option>
                        <el-option v-for="item in typeNameList" :label="item.text" :value="item.value"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item label="数据名称">
                    <el-input placeholder="数据名称" v-model="listQuery.name"></el-input>
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" @@click="getlist()" icon="el-icon-search">查询</el-button>
                    <el-button type="primary" @@click="showModal('idNames')" icon="el-icon-plus">添加</el-button>
                </el-form-item>
            </el-form>
        </el-col>
        <el-col :span="24">
            <el-table :data="tableData" border style="width: 100%">
                <el-table-column label="序号" type="index" width="60"></el-table-column>
                <el-table-column prop="typeName" label="类别名称"></el-table-column>
                <el-table-column prop="name" label="数据名称"></el-table-column>
                <el-table-column prop="createDateTime" label="创建时间"></el-table-column>
                <el-table-column prop="remark" label="备注"></el-table-column>
                <el-table-column label="图片">
                    <template slot-scope="scope">
                        <img v-if="scope.row.imageSrc" :src="'/UploadImage/'+scope.row.imageSrc" style="height: 50px;" />
                    </template>
                </el-table-column>
                <el-table-column label="操作" width="160">
                    <template slot-scope="scope">
                        <el-button size="mini" type="primary" @@click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                        <el-button size="mini" type="danger" @@click="handleDelete(scope.$index, scope.row)">删除</el-button>
                    </template>
                </el-table-column>
            </el-table>
        </el-col>
        <el-col :span="24" class="pagination-container">
            <el-pagination background @@size-change="handleSizeChange" @@current-change="handleCurrentChange" :current-page="listQuery.page"
                           :page-sizes="[10,20,30, 50]" :page-size="listQuery.limit" layout="total, sizes, prev, pager, next, jumper" :total="total">
            </el-pagination>
        </el-col>
        <el-dialog :title="title" :visible.sync="dialogFormVisible" width="30%">
            <el-form ref="idNames" status-icon :model="idNames" label-width="100px" :rules="rules">
                <input type="hidden" v-model="idNames.Id" />
                <el-form-item prop="TypeName" label="类型名称">
                    <el-input v-model="idNames.TypeName"></el-input>
                </el-form-item>
                <el-form-item prop="Name" label="数据名称">
                    <el-input v-model="idNames.Name"></el-input>
                </el-form-item>
                <el-form-item label="备注">
                    <el-input type="textarea" v-model="idNames.Remark"></el-input>
                </el-form-item>
                <el-form-item label="图片">
                    <el-upload
                        class="avatar-uploader"
                        action="/IdNames/UploadImage"
                        :show-file-list="false"
                        :data="idNames"
                        :on-success="handleAvatarSuccess"
                        :before-upload="beforeAvatarUpload">
                        <img v-if="idNames.ImageSrc" :src="'/UploadImage/'+idNames.ImageSrc" class="avatar">
                        <i v-else class="el-icon-plus avatar-uploader-icon"></i>
                    </el-upload>
                </el-form-item>
                <el-form-item>
                    <el-button :disabled="saveDisabled" @@click="create('idNames')" type="primary">立即保存</el-button>
                    <el-button @@click="cancel('idNames')">取消</el-button>
                </el-form-item>
            </el-form>
        </el-dialog>
    </el-row>
</div>

@section scripts{
    <script type="text/javascript">
        var App = new Vue({
            el: "#app",
            data() {
                return {
                    total: 0,
                    listQuery: {
                        page: 1,
                        limit: 10,
                        name: '',
                        typeName: ''
                    },
                    title: "添加基础数据信息",
                    dialogFormVisible: false,
                    saveDisabled: false,
                    tableData: [],
                    idNames: {
                        TypeName: '',
                        Name: '',
                        Id: 0,
                        Remark: '',
                        ImageSrc: ''
                    },
                    rules: {
                        TypeName: [
                            { required: true, message: '请输入类型名称', trigger: 'blur' },
                            { min: 1, max: 50, message: '长度在 1 到 50 个字符', trigger: 'blur' }
                        ],
                        Name: [
                            { required: true, message: '请输入数据名称', trigger: 'blur' },
                            { min: 1, max: 50, message: '长度在 1 到 50 个字符', trigger: 'blur' }
                        ]
                    },
                    typeNameList: @Html.Raw(JsonConvert.SerializeObject(ViewBag.TypeNameList))
                }
            },
            methods: {
                getlist() {
                    window.axios.get('/IdNames/GetList', { params: this.listQuery })
                        .then((response) => {
                            this.tableData = response.data.data.data;
                            this.total = response.data.data.total;
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                },
                showModal(formName) {
                    this.dialogFormVisible = true;
                    if (this.$refs[formName]) {
                        this.$refs[formName].resetFields();
                    }
                    this.idNames = {
                        TypeName: '',
                        Name: '',
                        Id: 0,
                        Remark: '',
                        ImageSrc: ''
                    };
                    this.title = "添加基础数据信息";
                },
                cancel(formName) {
                    this.dialogFormVisible = false;
                    this.$refs[formName].resetFields();
                },
                create(formName) {
                    this.$refs[formName].validate((valid) => {
                        if (valid) {
                            this.saveDisabled = true;
                            window.axios.post('/IdNames/Add', this.idNames)
                                .then((response) => {
                                    var data = response.data;
                                    if (data.result) {
                                        this.$message({
                                            message: data.msg,
                                            type: 'success'
                                        });
                                        this.getlist();
                                        this.dialogFormVisible = false;
                                    } else {
                                        this.$message.error(data.msg);
                                    }
                                    this.saveDisabled = false;
                                })
                                .catch((error) => {
                                    this.$message.error(error);
                                    this.saveDisabled = false;
                                });
                        } else {
                            this.$message.error('请检查表单信息是否正确');
                            return false;
                        }
                    });
                },
                handleEdit(index, row) {
                    this.dialogFormVisible = true;

                    this.idNames = {
                        TypeName: '',
                        Name: '',
                        Id: 0,
                        Remark: '',
                        ImageSrc: ''
                    };
                    var idNames = {
                        TypeName: row.typeName,
                        Name: row.name,
                        Id: row.id,
                        Remark: row.remark,
                        ImageSrc: row.imageSrc
                    }
                    this.idNames = idNames;
                    this.title = "修改基础数据信息";
                },
                handleDelete(index, row) {
                    this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type: 'warning' })
                        .then(() => {
                            window.axios.post('/IdNames/Delete', { id: row.id })
                                .then((response) => {
                                    var data = response.data;
                                    if (data.result) {
                                        this.$message({ message: data.msg, type: 'success' });
                                        this.getlist();
                                    } else {
                                        this.$message.error(data.msg);
                                    }
                                })
                                .catch((error) => {
                                    console.log(error);
                                });

                        })
                        .catch(() => {
                            this.$message({ type: 'info', message: '已取消删除' });
                        });
                },
                handleSizeChange(val) {
                    this.listQuery.limit = val;
                    this.getlist();
                },
                handleCurrentChange(val) {
                    this.listQuery.page = val;
                    this.getlist();
                },
                handleAvatarSuccess(res, file) {
                    if (res.result) {
                        this.$message({
                            message: res.msg,
                            type: 'success'
                        });
                        this.idNames.ImageSrc = res.data;
                    } else {
                        this.$message.error(res.msg);
                    }
                },
                beforeAvatarUpload(file) {
                    var isJPG = file.type === 'image/jpeg';
                    var isPng = file.type === 'image/png';
                    var isLt5M = file.size / 1024 / 1024 < 5;

                    if (!isJPG && !isPng) {
                        this.$message.error('上传头像图片只能是 JPG 和 PNG 格式!');
                    }
                    if (!isLt5M) {
                        this.$message.error('上传头像图片大小不能超过 5MB!');
                    }
                    return (isJPG || isPng) && isLt5M;
                },
                typeNameChange() {
                    this.getlist();
                }
            },
            mounted() {
                this.getlist();
            }
        });
    </script>
}